const router = require('express').Router();
const { User } = require('../../db/models');
const bcrypt = require('bcrypt');
const generateToken = require('../utils/generateToken');
const cookieConfig = require('../../configs/cookieConfig');
const {
  validateSignupData,
  validateSigninData,
} = require('../middlewares/validateData');
const nodemailer = require('nodemailer');

router.post('/signup', validateSignupData, async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const [user, created] = await User.findOrCreate({
      where: { email },
      defaults: {
        username,
        email,
        password: await bcrypt.hash(password, 10),
      },
    });

    if (!created) {
      return res
        .status(409)
        .json({ message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const plainUser = user.get();
    delete plainUser.password;
    delete plainUser.createdAt;
    delete plainUser.updatedAt;

    const { accessToken, refreshToken } = generateToken({ user: plainUser });

    const transporter = nodemailer.createTransport({
      service: 'Gmail',
      auth: {
        user: 'vanroseaxl1@gmail.com',
        pass: 'njja kzsp nsya xbuv',
      },
    });

    const mailOptions = {
      from: 'üëª BEFIT üëª vanroseaxl1@gmail.com',
      to: email,
      subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
      html: `
        <h1>–ü—Ä–∏–≤–µ—Ç, ${username} ‚ù§Ô∏è!</h1>
        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –£—Å–ø–µ—Ö–æ–≤ –≤ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–∏üî•.</p>
        <p>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ <a href="http://localhost:5173/plans">–ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</a>. 
        
        </p>
        <br/>
         <p>–° –£–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ <a href="http://localhost:5173">BE FIT</a></p>
      `,
    };

    await transporter.sendMail(mailOptions);

    return res
      .status(201)
      .cookie('refreshToken', refreshToken, cookieConfig.refresh)
      .json({
        success: true,
        user: plainUser,
        accessToken,
      });
  } catch (error) {
    console.error('Signup error:', error);
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ',
    });
  }
});
router.post('/signin', validateSigninData, async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ where: { email } });

    if (!user) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π',
      });
    }

    const isValidPassword = await bcrypt.compare(password, user.password);

    if (!isValidPassword) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å',
      });
    }

    if (user.isBlocked) {
      return res.status(403).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      });
    }

    const plainUser = user.get();
    delete plainUser.password;
    delete plainUser.createdAt;
    delete plainUser.updatedAt;

    const { accessToken, refreshToken } = generateToken({ user: plainUser });

    return res.status(200).cookie('refreshToken', refreshToken, cookieConfig.refresh).json({
      success: true,
      user: plainUser,
      accessToken,
    });
  } catch (error) {
    console.error('Signin error:', error);
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ',
    });
  }
});

router.get('/signout', (req, res) => {
  try {
    res.clearCookie('refreshToken');
    return res.status(200).json({
      success: true,
      message: 'Logged out successfully',
    });
  } catch (error) {
    console.error('Logout error:', error);
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ',
    });
  }
});

router.patch('/profile', async (req, res) => {
  const { id, email, password, ...otherData } = req.body;
  try {
    const user = await User.findByPk(id);
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (email) {
      const existingUser = await User.findOne({ where: { email } });
      if (existingUser && existingUser.id !== id) {
        return res
          .status(400)
          .json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
      }
    }

    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      otherData.password = hashedPassword;
    }

    await user.update({
      ...otherData,
      ...(email && { email }),
      ...(password && { password: otherData.password }),
    });
    const updatedUser = user.toJSON();
    delete updatedUser.password;

    const { accessToken, refreshToken } = generateToken({ user: updatedUser });

    return res
      .status(200)
      .cookie('refreshToken', refreshToken, cookieConfig.refresh)
      .json({
        success: true,
        user: updatedUser,
        accessToken,
      });
  } catch (error) {
    console.error(error, '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    res.sendStatus(500);
  }
});

router.post('/check-password', async (req, res) => {
  const { userId, password } = req.body;
  try {
    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    res.json({ isMatch });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
  }
});

module.exports = router;
