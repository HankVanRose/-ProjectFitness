const { Client } = require('pg');
const nodemailer = require('nodemailer');
const router = require('express').Router();
const bcrypt = require('bcrypt');

const client = new Client({
  connectionString: process.env.DB,
});

client.connect();

const transporter = nodemailer.createTransport({
  service: 'Gmail', // –ò–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
  auth: {
    user: 'vanroseaxl1@gmail.com',  
    pass: 'njja kzsp nsya xbuv',  
  },
});

async function sendOtp(email, otp) {
    const mailOptions = {
        from: 'üëª BEFIT üëª vanroseaxl1@gmail.com',
        to: email,
        subject: '–í–∞—à OTP –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è',
        text: `–í–∞—à OTP –∫–æ–¥: ${otp}`,
    };

    await transporter.sendMail(mailOptions);
}
 
router.post('/request-reset', async (req, res) => {
    const { email } = req.body;

    try {
        const result = await client.query('SELECT * FROM User WHERE email=$1', [email]);
        const user = result.rows[0];
        console.log('\n\n\n\nn\n\n\n\n\n\n\n\n\n', email, '\n\n\n\nn\n\n\n\n\n\n\n\n\n');

        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OTP –∫–æ–¥–∞
        const otp = crypto.randomInt(100000, 999999).toString();
        const otpExpiration = new Date(Date.now() + 10 * 60000); // 10 –º–∏–Ω—É—Ç

        await client.query('UPDATE users SET otp=$1, otp_expiration=$2 WHERE email=$3', [otp, otpExpiration, email]);
        await sendOtp(email, otp);

        res.status(200).json({ message: 'OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
router.post('/reset-password', async (req, res) => {
    const { email, otp, newPassword } = req.body;

    try {
        const result = await client.query('SELECT * FROM Users WHERE email=$1', [email]);
        const user = result.rows[0];
       

        if (!user || user.otp !== otp || new Date() > new Date(user.otp_expiration)) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π OTP –∏–ª–∏ OTP –∏—Å—Ç–µ–∫' });
        }

        // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await client.query('UPDATE Users SET password=$1, otp=NULL, otp_expiration=NULL WHERE email=$2', [hashedPassword, email]);

        res.status(200).json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;